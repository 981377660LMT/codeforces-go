// Code generated by copypasta/template/atcoder/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"math/bits"
	"testing"
)

// 提交地址：https://atcoder.jp/contests/abc185/submit?taskScreenName=abc185_e
func Test_run(t *testing.T) {
	t.Log("Current test is [e]")
	testCases := [][2]string{
		{
			`4 3
1 2 1 3
1 3 1`,
			`2`,
		},
		{
			`4 6
1 3 2 4
1 5 2 6 4 3`,
			`3`,
		},
		{
			`5 5
1 1 1 1 1
2 2 2 2 2`,
			`5`,
		},
		// TODO 测试参数的下界和上界
		{
			`1 1
1
2`,
			`1`,
		},
		{
			`1 1
1
1`,
			`0`,
		},
		{
			`1 2
1
1 2`,
			`1`,
		},
		{
			`1 2
1
1 1`,
			`1`,
		},
		{
			`2 2
        	            	5 4
        	            	4 3`,
			`2`,
		},
		{
			`2 3
        	            	2 1
        	            	5 2 3`,
			`2`,
		},
		{
			`3 3
        	            	5 3 2
        	            	3 2 1`,
			`2`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, -1, run)
}
// https://atcoder.jp/contests/abc185/tasks/abc185_e

func TestCompare(t *testing.T) {
	inputGenerator := func() string {
		//return `2 2
        //	            	5 4
        //	            	4 3`
		rg := testutil.NewRandGenerator()
		n := rg.Int(1, 5)
		m := rg.Int(1,5)
		rg.NewLine()
		rg.IntSlice(n, 1, 5)
		rg.IntSlice(m, 1, 5)
		//Println(rg.String())
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		//return
		var n, m int
		fmt.Fscan(in, &n, &m)
		a := make([]int, n)
		for i := range a {
			fmt.Fscan(in, &a[i])
		}
		b := make([]int, m)
		for i := range b {
			fmt.Fscan(in, &b[i])
		}
		ans := int(1e9)
		calc := func(sub uint) (res int) {
			aa := []int{}
			for mask := sub ; mask > 0; mask &= mask - 1 {
				p := bits.TrailingZeros(mask)
				v := a[p]
				aa = append(aa, v)
			}
			calc2 := func(sub uint) (res2 int) {
				bb := []int{}
				for ; sub > 0; sub &= sub - 1 {
					p := bits.TrailingZeros(sub)
					v := b[p]
					bb = append(bb, v)
				}
				res2 = n+m-len(aa)-len(bb)
				for i, v := range aa {
					if v != bb[i] {
						res2++
					}
				}
				return
			}
			res = 1e9
			for sub2 := uint(0); sub2 < 1<<len(b); sub2++ {
				if bits.OnesCount(sub2) != bits.OnesCount(sub) {
					continue
				}
				r := calc2(sub2)
				//if r == 1 {
				//	println()
				//}
				res = min(res, r)
			}
			return
		}
		for sub := uint(0); sub < 1<<len(a); sub++ {
			res := calc(sub)
			ans = min(ans, res)
		}

		fmt.Fprint(out, ans)
	}

	// 先用 runBF 跑下样例，大致检查下 runBF 的正确性
	//dir, _ := filepath.Abs(".")
	//testutil.AssertEqualFileCaseWithName(t, dir, "in*.txt", "ans*.txt", 0, runBF)
	//return

	// 对拍
	testutil.AssertEqualRunResultsInf(t, inputGenerator, runBF, run)
	return

	// for hacking, write wrong codes in runBF
	testutil.AssertEqualRunResultsInf(t, inputGenerator, run, runBF)
}
