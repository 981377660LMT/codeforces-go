// Code generated by copypasta/template/atcoder/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"math/bits"
	"testing"
)

// 题目：https://atcoder.jp/contests/arc134/tasks/arc134_d
// 提交：https://atcoder.jp/contests/arc134/submit?taskScreenName=arc134_d
// 对拍：https://atcoder.jp/contests/arc134/submissions?f.LanguageName=Go&f.Status=AC&f.Task=arc134_d&orderBy=source_length
func Test_run(t *testing.T) {
	t.Log("Current test is [d]")
	testCases := [][2]string{
		{
			`3
2 1 3 1 2 2`,
			`1 2`,
		},
		{
			`10
38 38 80 62 62 67 38 78 74 52 
53 77 59 83 74 63 80 61 68 55`,
			`38 38 38 52 53 77 80 55`,
		},
		{
			`12
52 73 49 63 55 74 35 68 22 22 74 50 
71 60 52 62 65 54 70 59 65 54 60 52`,
			`22 22 50 65 54 52`,
		},
		{
			`3
1 2 4 4 3 3`,
			`1 2 4 3`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, run)
}

/*

38 38 38 52
53 77 80 55

22 22 50
65 54 52




第一层 min + 第二层有 <= min 的数 只保留第二层最小的
第一层只有 min + 第二层 min

（一般情况）
第一层 +

*/

func TestCompare(_t *testing.T) {
	return
	testutil.DebugTLE = 0

	inputGenerator := func() string {
		//return ``
		rg := testutil.NewRandGenerator()
		n := rg.Int(1, 9)
		rg.NewLine()
		rg.IntSlice(n*2, 1, 5)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		Fscan(in, &n)
		a := make([]int, n)
		for i := range a {
			Fscan(in, &a[i])
		}
		b := make([]int, n)
		for i := range b {
			Fscan(in, &b[i])
		}

		less := func(a, b []int) bool {
			n, m := len(a), len(b)
			for i := 0; i < n && i < m; i++ {
				if a[i] != b[i] {
					return a[i] < b[i]
				}
			}
			return n < m
		}

		calc := func(sub int) (c, d []int) {
			for _s := uint(sub); _s > 0; _s &= _s - 1 {
				p1 := bits.TrailingZeros(_s)
				v := a[p1]
				c = append(c, v)
				d = append(d, b[p1])
			}
			return
		}
		ans := []int{}
		for sub := 1; sub < 1<<len(a); sub++ {
			c, d := calc(sub)
			c = append(c, d...)
			if len(ans) == 0 || less(c, ans) {
				ans = c
			}
		}
		for _, v := range ans {
			Fprint(out, v, " ")
		}
		Fprintln(out)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, run)
}
