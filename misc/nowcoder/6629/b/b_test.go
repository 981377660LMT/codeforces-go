// Code generated by copypasta/template/nowcoder/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	"github.com/stretchr/testify/assert"
	"math/rand"
	"testing"
)

func Test(t *testing.T) {
	t.Log("Current test is [b]")
	examples := [][]string{
		{
			`5`,`[2,1,1,3,2]`,
			`1`,
		},
		{
			`3`,`[30,10,20]`,
			`20`,
		},
		// TODO 测试参数的下界和上界
		{
			`3`,`[1,1,1000000000]`,
			`999999999`,
		},
		{
			`3`,`[1,1,1]`,
			`0`,
		},
		{
			`3`,`[1,1,2]`,
			`1`,
		},
		{
			`3`,`[1,1,2]`,
			`1`,
		},
		{
			`2`,`[1,1000000000]`,
			`999999999`,
		},
		{
			`2`,`[1,1]`,
			`0`,
		},
		{
			`4`,`[1,2,3,3]`,
			`2`,
		},
	}
	targetCaseNum := -1
	if err := testutil.RunLeetCodeFuncWithExamples(t, solve, examples, targetCaseNum); err != nil {
		t.Fatal(err)
	}
}
// https://ac.nowcoder.com/acm/contest/6629/b

func Test1(t *testing.T) {
	var _permute func([]int, int, func())
	_permute = func(a []int, i int, do func()) {
		if i == len(a) {
			do()
			return
		}
		_permute(a, i+1, do)
		for j := i + 1; j < len(a); j++ {
			a[i], a[j] = a[j], a[i]
			_permute(a, i+1, do)
			a[i], a[j] = a[j], a[i]
		}
	}
	permuteAll := func(a []int, do func()) { _permute(a, 0, do) }
	max := func(a, b int) int {
		if a > b {
			return a
		}
		return b
	}
	abs := func(x int) int {
		if x < 0 {
			return -x
		}
		return x
	}
	for {
		n := rand.Intn(6)+2
		a := make([]int, n)
		for i := range a {
			a[i] = rand.Intn(10)+1
		}
		my := solve(n,a)
		tmp := make([]int, len(a))
		copy(tmp, a)
		ans := int(1e9)
		permuteAll(a, func() {
			d := 0
			for i := 1; i < n; i++ {
				d = max(d, abs(a[i]-a[i-1]))
			}
			d = max(d, abs(a[0]-a[n-1]))
			if d < ans {
				ans = d
			}
		})
		if !assert.Equal(t, ans, my) {
			fmt.Println(tmp)
		}
	}

}
