// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"strings"
	"testing"
)

var examples = [][]string{
	{
		`"001"`,
		`2`,
	},
	{
		`"11"`,
		`2`,
	},
	{
		`"101"`,
		`5`,
	},
	{
		`"0"`,
		`1`,
	},
	{
		`"00"`,
		`1`,
	},
	{
		`"1"`,
		`1`,
	},
	{
		`"1110001"`,
		`23`,
	},
	{
		`"110"`,
		`5`,
	},
}

func Test(t *testing.T) {
	t.Log("Current test is [d]")

	targetCaseNum := -1
	if err := testutil.RunLeetCodeFuncWithExamples(t, numberOfUniqueGoodSubsequences, examples, targetCaseNum); err != nil {
		t.Fatal(err)
	}
}

func TestCompareInf(t *testing.T) {
	inputGenerator := func() (s string) {
		rg := testutil2.NewRandGenerator()
		s = rg.Str(1, 9, '0', '1')
		return
	}

	runAC := func(s string) (ans int) {
		set := map[string]bool{}
		t := []byte{}
		n := len(s)
		var f func(int)
		f = func(p int) {
			if p == n {
				if len(t) == 0 || t[0] == '0' {
					return
				}
				set[string(t)] = true
				return
			}
			f(p + 1)
			t = append(t, s[p])
			f(p + 1)
			t = t[:len(t)-1]
		}
		f(0)
		ans = len(set)
		if strings.Contains(s, "0"){
			ans++
		}
		ans%=(1e9+7)
		return
	}

	// test examples first (or make it global)
	//if err := testutil.RunLeetCodeFuncWithExamples(t, runAC, examples, 0); err != nil {
	//	t.Fatal(err)
	//}
	//return

	testutil.CompareInf(t, inputGenerator, runAC, numberOfUniqueGoodSubsequences)
}

// https://leetcode-cn.com/contest/weekly-contest-256/problems/number-of-unique-good-subsequences/
