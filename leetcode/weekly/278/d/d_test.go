// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	"testing"
)

var 	examples = [][]string{
	{
		`["a","b","ab","cde"]`,
		`[2,3]`,
	},
	{
		`["a","ab","abc"]`,
		`[1,3]`,
	},
	{
		`["web","a","te","hsx","v","k","a","roh"]`,
		`[5,4]`,
	},
}

func Test_d(t *testing.T) {

	targetCaseNum := 1
	if err := testutil.RunLeetCodeFuncWithExamples(t, groupStrings, examples, targetCaseNum); err != nil {
		t.Fatal(err)
	}
}
// https://leetcode-cn.com/contest/weekly-contest-278/problems/groups-of-strings/


//func TestCompareInf(t *testing.T) {
//	inputGenerator := func() (a []string) {
//		rg := testutil2.NewRandGenerator()
//		n := rg.Int(1, 10)
//		for i := 0; i < n; i++ {
//			b := rg.UniqueSlice(5,0,10)
//			s := []byte{}
//			for _, v := range b {
//				s = append(s, byte('a'+v))
//			}
//			a = append(a, string(s))
//		}
//		return
//	}
//
//	runAC := func(a []string) (ans []int) {
//
//		fa := map[int]int{}
//		var find func(int) int
//		find = func(x int) int {
//			if fx, ok := fa[x]; ok && fx != x {
//				fa[x] = find(fx)
//				return fa[x]
//			}
//			return x
//		}
//
//		merge := func(from, to int) bool {
//			if _, ok := fa[to]; !ok {
//				return false
//			}
//			x, y := find(from), find(to)
//			if x == y {
//				return false
//			}
//			fa[x] = y
//			return true
//		}
//
//		cnt := map[int]int{}
//		for _, s := range a {
//			m := f(s)
//			fa[m] = m
//			cnt[m]++
//		}
//		keys := make([]int, 0, len(cnt))
//		for k := range cnt {
//			keys = append(keys, k)
//		}
//
//	//o:
//		for _, m := range keys {
//			for i := 0; i < 26; i++ {
//				if m>>i&1 == 0 {
//					if merge(m, m|(1<<i)) {
//						//continue o
//					}
//				} else {
//					if merge(m, m^(1<<i)) {
//						//continue o
//					}
//				}
//			}
//			for i := 0; i < 26; i++ {
//				if m>>i&1 > 0 {
//					for j := 0; j < 26; j++ {
//						if m>>j&1 == 0 {
//							if merge(m, m^(1<<i)|(1<<j)) {
//								//continue o
//							}
//						}
//					}
//				}
//			}
//		}
//
//		//keys := make([]int, 0, len(fa))
//		//for k := range fa {
//		//	keys = append(keys, k)
//		//}
//
//		comps := map[int]int{}
//
//		for _, i := range keys {
//			f := find(i)
//			comps[f]++
//			comps[f] += cnt[i] - 1
//		}
//
//		ans = []int{0, 0}
//		ans[0] = len(comps)
//		mx := 0
//		for _, v := range comps {
//			mx = max(mx, v)
//		}
//		ans[1] = mx
//
//
//		return
//	}
//
//	if err := testutil.RunLeetCodeFuncWithExamples(t, runAC, examples, 0); err != nil {
//		t.Fatal(err)
//	}
//	return
//
//	testutil.CompareInf(t, inputGenerator, runAC, groupStrings)
//}
