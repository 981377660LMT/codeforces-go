// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"math/bits"
	"sort"
	"testing"
)
var examples = [][]string{
	{
		`[0,1,2,2]`,
		`3`,
	},
	{
		`[2,2,0,0]`,
		`0`,
	},
	{
		`[0,1,2,0,1,2]`,
		`7`,
	},
	{
		`[2,0,0,1,2,0,2,1,2,2,2,2,2,2,1,0,2,0,2,2,1,1,2,1,1,0,1,0,2,1,2,0,1,2,1,2,0,0,2,0,2,1,0,0,0,1,1,0,1,2,1,2,2,0,1,2,0,0,1,2,1,1,2,0,1,2,1,0,1,0,1,1,2,0,0,0,1,1,1,2,1,0,0,0,0,2,2,1,1,1,2,1,2,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,2,1,1,0,0,2,0,2,2,1,0,2,2,2,0,0,1,2,1,1,2,1,2,1,1,1,1,2,0,2,0,1,0,2,0,2,0,0,1,2,1,1,0,2,0,1,0,2,1,1,0,0,1,1,0,1,0,2,1,2,0,0,0,1,1,1,1,1,1,2,2,0,2,2,2,1,0,0,0,1,1,0,2,1,1,2,1,0,1,0,0,2,1,0,2,1,1,1,0,2,2,2,1,1,0,2,1,0,1,0,0,2,1,2,0,0,2,1,1,0,1,1,1,1,1,1,2,1,2,1,1,0,0,2,0,1,0,0,0,2,1,1,2,1,1,0,0,2,0,1,2,1,1,1,0,2,1,1,0,0,1,2,1,1,1,2,0,1,0,2,2,2,2,0,2,2,2,2,0,1,0,2,1,1,2,1,2,1,2,2,1,2,0,2,2,0,0,2,0,1,2,2,2,2,0,1,1,0,0,1,2,0,2,2,1,1,1,0,1,1,0,1,1,2,0,2,0,1,1,0,0,2,0,2,1,2,1,1,0,0,2,2,1,0,0,0,0,0,1,2,0,0,0,1,1,1,1,2,0,1,1,0,0,0,1,0,2,1,0,2,0,1,0,2,0,1,1,2,2,0,1,0,0,2,1,1,2,1,1,2,2,0,1,2,0,2,2,0,0,2,0,0,2,2,2,2,2,0,1,2,0,1,0,1,1,0,1,1,2,1,0,1,2,1,2,1,1,1,2,2,1,0,1,1,2,2,2,0,0,1,2,1,2,2,1,1,0,2,2,2,2,2,1,1,2,2,2,0,0,0,2,2,0,1,1,1,1,0,1,0,0,1,2,0]`,
		`782041255`,
	},
	{
		`[0,1,1,1,2,1]`,
		`7`,
	},
	{
		`[0,1,1,1,1,0,2]`,
		`15`,
	},
}
func Test(t *testing.T) {
	t.Log("Current test is [d]")

	targetCaseNum :=  -1
	if err := testutil.RunLeetCodeFuncWithExamples(t, countSpecialSubsequences, examples, targetCaseNum); err != nil {
		t.Fatal(err)
	}
}
// https://leetcode-cn.com/contest/weekly-contest-252/problems/count-number-of-special-subsequences/

func TestCompareInf(t *testing.T) {
	inputGenerator := func() (a []int) {
		rg := testutil2.NewRandGenerator()
		n := rg.Int(3, 12)
		a = rg.IntSlice(n, 0,2)
		return
	}

	runAC := func(a []int) (ans int) {
		// 若要修改 a，必须先 copy 一份，在 copied 上修改
		calc := func(sub uint) (res int) {
			b := []int{}
			for sub := sub; sub > 0; sub &= sub - 1 {
				p := bits.TrailingZeros(sub)
				v := a[p]
				b = append(b, v)
			}
			if !sort.IntsAreSorted(b) {
				return 0
			}
			cnt := map[int]int{}
			for _, v := range b {
				cnt[v]++
			}
			if cnt[0]>0 && cnt[1]>0 && cnt[2] >0 {
				return 1
			}
			return 0
		}
		for sub := uint(0); sub < 1<<len(a); sub++ {
			res := calc(sub)
ans+=res
		}
		return
	}

	// test examples first (or make it global)
	//if err := testutil.RunLeetCodeFuncWithExamples(t, runAC, examples, 0); err != nil {
	//	t.Fatal(err)
	//}
	//return

	testutil.CompareInf(t, inputGenerator, runAC, countSpecialSubsequences)
}
