// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"math/bits"
	"testing"
)

// https://codeforces.com/problemset/problem/264/C
// https://codeforces.com/problemset/status/264/problem/C
func Test_cf264C(t *testing.T) {
	testCases := [][2]string{
		{
			`6 3
1 -2 3 4 0 -1
1 2 1 2 1 1
5 1
-2 1
1 0`,
			`20
9
4`,
		},
		{
			`4 1
-3 6 -1 2
1 2 3 1
1 -1`,
			`5`,
		},
		{
			`3 1
-1 5 -1
3 3 3
-5 -5`,
			`10`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf264C)
}

func TestCompare_cf264C(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 9)
		rg.Int(1,1)
		rg.NewLine()
		rg.IntSlice(n, -5, 5)
		rg.IntSlice(n,1,n)
		rg.Int(-5,5)
		rg.Int(-5,5)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n, q, a, b int
		Fscan(in, &n, &q)
		ps := make([]struct{ v, c int }, n)
		for i := range ps {
			Fscan(in, &ps[i].v)
		}
		for i := range ps {
			Fscan(in, &ps[i].c)
		}
		for ;q>0;q-- {
			Fscan(in, &a, &b)
			calc := func(sub int) (res int) {
				pre := 0
				for _s := uint(sub); _s > 0; _s &= _s - 1 {
					p := ps[bits.TrailingZeros(_s)]
					if pre == 0  || p.c != pre{
						res += p.v * b
					} else {
						res += p.v * a
					}
					pre = p.c
				}
				return
			}
			ans := 0
			for sub := 0; sub < 1<<len(ps); sub++ {
				res := calc(sub)
				ans = max(ans, res)
			}
			Fprintln(out, ans)
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf264C)
}
