// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/633/F
// https://codeforces.com/problemset/status/633/problem/F
func Test_cf633F(t *testing.T) {
	testCases := [][2]string{
		{
			`9
1 2 3 4 5 6 7 8 9
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9`,
			`25`,
		},
		{
			`2
20 10
1 2`,
			`30`,
		},
		{
			`7
1 1 2 2 2 2 2
1 2
2 3
1 4
2 5
4 6
4 7`,
			`11`,
		},
		{
			`7
1 1 2 2 2 2 2
1 2
2 3
3 4
3 5
1 6
1 7`,
			`11`,
		},
		{
			`5
1 2 2 2 2
1 2
2 3
3 4
3 5`,
			`9`,
		},
		{
			`6
1 1 1 1 2 1
1 2
2 3
2 4
3 5
3 6`,
			`7`,
		},
		{
			`7
1 2 2 2 2 1 1
1 2
2 3
2 4
4 5
5 6
5 7`,
			`10`,
		},
		{
			`7
1 2 1 1 1 2 1
1 2
2 3
3 4
3 5
5 6
5 7`,
			`9`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf633F)
}

func TestCompare_cf633F(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 20)
		rg.NewLine()
		rg.IntSlice(n, 1, 9)
		rg.TreeEdges(n, 1)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n, ans int
		Fscan(in, &n)
		a := make([]int, n)
		for i := range a {
			Fscan(in, &a[i])
		}
		g := make([][]int, n)
		for i := 1; i < n; i++ {
			var v, w int
			Fscan(in, &v, &w)
			v--
			w--
			g[v] = append(g[v], w)
			g[w] = append(g[w], v)
		}

		const N = 100

		var (
			f  [N]int
			p  [N]int
			h  [N]int
			mx [N]int
		)

		var dfs func(int, int)
		dfs = func(x, fa int) {
			f[x], p[x], mx[x] = a[x], a[x], a[x]
			for _, y := range g[x] {
				if y != fa {
					dfs(y, x)
					ans = max(max(p[x]+p[y], ans), max(f[y]+mx[x], f[x]+mx[y]))
					f[x] = max(max(f[x], mx[y]+a[x]+h[x]), max(p[y]+mx[x], a[x]+f[y]))
					p[x] = max(p[x], max(p[y], mx[x]+mx[y]))
					mx[x] = max(mx[x], a[x]+mx[y])
					h[x] = max(h[x], p[y])
				}
			}
		}
		dfs(0, -1)
		Fprint(out, ans)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf633F)
}
